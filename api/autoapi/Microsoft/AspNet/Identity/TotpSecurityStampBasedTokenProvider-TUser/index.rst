

TotpSecurityStampBasedTokenProvider<TUser> Class
================================================



.. contents:: 
   :local:



Summary
-------

Represents a token provider that generates time based codes using the user's security stamp.





Inheritance Hierarchy
---------------------


* :dn:cls:`System.Object`
* :dn:cls:`Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider\<TUser>`








Syntax
------

.. code-block:: csharp

   public abstract class TotpSecurityStampBasedTokenProvider<TUser> : IUserTokenProvider<TUser> where TUser : class





GitHub
------

`View on GitHub <https://github.com/aspnet/identity/blob/master/src/Microsoft.AspNet.Identity/TotpSecurityStampBasedTokenProvider.cs>`_





.. dn:class:: Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider<TUser>

Methods
-------

.. dn:class:: Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider<TUser>
    :noindex:
    :hidden:

    
    .. dn:method:: Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNet.Identity.UserManager<TUser>, TUser)
    
        
    
        Returns a flag indicating whether the token provider can generate a token suitable for two factor authentication token for
        the specified ``ref``.
    
        
        
        
        :param manager: The  that can be used to retrieve user properties.
        
        :type manager: Microsoft.AspNet.Identity.UserManager{{TUser}}
        
        
        :param user: The user a token could be generated for.
        
        :type user: {TUser}
        :rtype: System.Threading.Tasks.Task{System.Boolean}
        :return: The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the a flag indicating if a two
            factor token could be generated by this provider for the specified <paramref name="user" /> and <paramref name="purpose" />.
            The task will return true if a two factor authentication token could be generated, otherwise false.
    
        
        .. code-block:: csharp
    
           public abstract Task<bool> CanGenerateTwoFactorTokenAsync(UserManager<TUser> manager, TUser user)
    
    .. dn:method:: Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider<TUser>.GenerateAsync(System.String, Microsoft.AspNet.Identity.UserManager<TUser>, TUser)
    
        
    
        Generates a token for the specified ``ref`` and ``purpose``.
    
        
        
        
        :param purpose: The purpose the token will be used for.
        
        :type purpose: System.String
        
        
        :param manager: The  that can be used to retrieve user properties.
        
        :type manager: Microsoft.AspNet.Identity.UserManager{{TUser}}
        
        
        :param user: The user a token should be generated for.
        
        :type user: {TUser}
        :rtype: System.Threading.Tasks.Task{System.String}
        :return: The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the token for the specified
            <paramref name="user" /> and <paramref name="purpose" />.
    
        
        .. code-block:: csharp
    
           public virtual Task<string> GenerateAsync(string purpose, UserManager<TUser> manager, TUser user)
    
    .. dn:method:: Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider<TUser>.GetUserModifierAsync(System.String, Microsoft.AspNet.Identity.UserManager<TUser>, TUser)
    
        
    
        Returns a constant, provider and user unique modifier used for entropy in generated tokens from user information.
    
        
        
        
        :param purpose: The purpose the token will be generated for.
        
        :type purpose: System.String
        
        
        :param manager: The  that can be used to retrieve user properties.
        
        :type manager: Microsoft.AspNet.Identity.UserManager{{TUser}}
        
        
        :param user: The user a token should be generated for.
        
        :type user: {TUser}
        :rtype: System.Threading.Tasks.Task{System.String}
        :return: The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing a constant modifier for the specified
            <paramref name="user" /> and <paramref name="purpose" />.
    
        
        .. code-block:: csharp
    
           public virtual Task<string> GetUserModifierAsync(string purpose, UserManager<TUser> manager, TUser user)
    
    .. dn:method:: Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider<TUser>.ValidateAsync(System.String, System.String, Microsoft.AspNet.Identity.UserManager<TUser>, TUser)
    
        
    
        Returns a flag indicating whether the specified ``token`` is valid for the given
        ``user`` and ``purpose``.
    
        
        
        
        :param purpose: The purpose the token will be used for.
        
        :type purpose: System.String
        
        
        :param token: The token to validate.
        
        :type token: System.String
        
        
        :param manager: The  that can be used to retrieve user properties.
        
        :type manager: Microsoft.AspNet.Identity.UserManager{{TUser}}
        
        
        :param user: The user a token should be validated for.
        
        :type user: {TUser}
        :rtype: System.Threading.Tasks.Task{System.Boolean}
        :return: The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the a flag indicating the result
            of validating the <paramref name="token"> for the specified </paramref><paramref name="user" /> and <paramref name="purpose" />.
            The task will return true if the token is valid, otherwise false.
    
        
        .. code-block:: csharp
    
           public virtual Task<bool> ValidateAsync(string purpose, string token, UserManager<TUser> manager, TUser user)
    

