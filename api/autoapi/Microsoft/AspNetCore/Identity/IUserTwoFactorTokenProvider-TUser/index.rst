

IUserTwoFactorTokenProvider<TUser> Interface
============================================






Provides an abstraction for two factor token generators.


Namespace
    :dn:ns:`Microsoft.AspNetCore.Identity`
Assemblies
    * Microsoft.AspNetCore.Identity

----

.. contents::
   :local:









Syntax
------

.. code-block:: csharp

    public interface IUserTwoFactorTokenProvider<TUser>
        where TUser : class








.. dn:interface:: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
    :hidden:

.. dn:interface:: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>

Methods
-------

.. dn:interface:: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>
    :noindex:
    :hidden:

    
    .. dn:method:: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
    
        
    
        
        Returns a flag indicating whether the token provider can generate a token suitable for two factor authentication token for
        the specified <em>user</em>.
    
        
    
        
        :param manager: The :any:`Microsoft.AspNetCore.Identity.UserManager\`1` that can be used to retrieve user properties.
        
        :type manager: Microsoft.AspNetCore.Identity.UserManager<Microsoft.AspNetCore.Identity.UserManager`1>{TUser}
    
        
        :param user: The user a token could be generated for.
        
        :type user: TUser
        :rtype: System.Threading.Tasks.Task<System.Threading.Tasks.Task`1>{System.Boolean<System.Boolean>}
        :return: 
            The :any:`System.Threading.Tasks.Task` that represents the asynchronous operation, containing the a flag indicating if a two
            factor token could be generated by this provider for the specified <em>user</em>.
            The task will return true if a two factor authentication token could be generated, otherwise false.
    
        
        .. code-block:: csharp
    
            Task<bool> CanGenerateTwoFactorTokenAsync(UserManager<TUser> manager, TUser user)
    
    .. dn:method:: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.GenerateAsync(System.String, Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
    
        
    
        
        Generates a token for the specified <em>user</em> and <em>purpose</em>.
    
        
    
        
        :param purpose: The purpose the token will be used for.
        
        :type purpose: System.String
    
        
        :param manager: The :any:`Microsoft.AspNetCore.Identity.UserManager\`1` that can be used to retrieve user properties.
        
        :type manager: Microsoft.AspNetCore.Identity.UserManager<Microsoft.AspNetCore.Identity.UserManager`1>{TUser}
    
        
        :param user: The user a token should be generated for.
        
        :type user: TUser
        :rtype: System.Threading.Tasks.Task<System.Threading.Tasks.Task`1>{System.String<System.String>}
        :return: 
            The :any:`System.Threading.Tasks.Task` that represents the asynchronous operation, containing the token for the specified 
            <em>user</em> and <em>purpose</em>.
    
        
        .. code-block:: csharp
    
            Task<string> GenerateAsync(string purpose, UserManager<TUser> manager, TUser user)
    
    .. dn:method:: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.ValidateAsync(System.String, System.String, Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
    
        
    
        
        Returns a flag indicating whether the specified <em>token</em> is valid for the given
        <em>user</em> and <em>purpose</em>.
    
        
    
        
        :param purpose: The purpose the token will be used for.
        
        :type purpose: System.String
    
        
        :param token: The token to validate.
        
        :type token: System.String
    
        
        :param manager: The :any:`Microsoft.AspNetCore.Identity.UserManager\`1` that can be used to retrieve user properties.
        
        :type manager: Microsoft.AspNetCore.Identity.UserManager<Microsoft.AspNetCore.Identity.UserManager`1>{TUser}
    
        
        :param user: The user a token should be validated for.
        
        :type user: TUser
        :rtype: System.Threading.Tasks.Task<System.Threading.Tasks.Task`1>{System.Boolean<System.Boolean>}
        :return: 
            The :any:`System.Threading.Tasks.Task` that represents the asynchronous operation, containing the a flag indicating the result
            of validating the <em>token</em><em>user</em> and <em>purpose</em>.
            The task will return true if the token is valid, otherwise false.
    
        
        .. code-block:: csharp
    
            Task<bool> ValidateAsync(string purpose, string token, UserManager<TUser> manager, TUser user)
    

